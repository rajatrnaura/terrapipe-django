# Generated by Django 4.2.23 on 2025-08-01 05:57

from django.conf import settings
import django.contrib.postgres.fields
from django.db import migrations, models
import django.db.models.deletion
import uuid


class Migration(migrations.Migration):

    dependencies = [
        ('dashboard', '0004_cellsgeoid_geoids_application_s2celltoken_usercart_and_more'),
    ]

    operations = [
        migrations.CreateModel(
            name='CellsGeoID',
            fields=[
                ('id', models.UUIDField(default=uuid.uuid4, editable=False, primary_key=True, serialize=False)),
            ],
            options={
                'db_table': 'cells_geo_ids',
                'managed': False,
            },
        ),
        migrations.CreateModel(
            name='GeoIDs',
            fields=[
                ('id', models.UUIDField(default=uuid.uuid4, editable=False, primary_key=True, serialize=False)),
                ('geo_id', models.CharField(blank=True, max_length=255, null=True, unique=True)),
                ('geo_data', models.TextField(blank=True, null=True)),
                ('authority_token', models.CharField(blank=True, max_length=255, null=True)),
                ('created_at', models.DateTimeField(blank=True, null=True)),
                ('updated_at', models.DateTimeField(blank=True, null=True)),
                ('country', models.CharField(blank=True, max_length=255, null=True)),
                ('boundary_type', models.CharField(blank=True, max_length=255, null=True)),
            ],
            options={
                'db_table': 'geo_ids',
                'managed': False,
            },
        ),
        migrations.CreateModel(
            name='Application',
            fields=[
                ('id', models.UUIDField(default=uuid.uuid4, editable=False, primary_key=True, serialize=False)),
                ('type', django.contrib.postgres.fields.ArrayField(base_field=models.CharField(max_length=50), blank=True, null=True, size=None)),
                ('description', models.TextField(blank=True, null=True)),
                ('authors', django.contrib.postgres.fields.ArrayField(base_field=models.CharField(max_length=100), blank=True, null=True, size=None)),
                ('company', models.CharField(blank=True, max_length=255, null=True)),
                ('create_date', models.DateTimeField(auto_now_add=True)),
                ('picture', models.TextField(blank=True, null=True)),
                ('dev_stage', models.CharField(blank=True, max_length=100, null=True)),
                ('price_scope_month', models.FloatField(blank=True, null=True)),
                ('root', models.CharField(max_length=255, unique=True)),
                ('meta_data', models.JSONField(blank=True, null=True)),
            ],
            options={
                'db_table': 'applications',
            },
        ),
        migrations.CreateModel(
            name='S2CellToken',
            fields=[
                ('id', models.UUIDField(default=uuid.uuid4, editable=False, primary_key=True, serialize=False)),
                ('cell_token', models.TextField(unique=True)),
            ],
            options={
                'db_table': 's2_cell_tokens',
            },
        ),
        migrations.AlterModelOptions(
            name='fields',
            options={'managed': False, 'verbose_name': 'Field', 'verbose_name_plural': 'Fields'},
        ),
        migrations.AlterModelOptions(
            name='user',
            options={},
        ),
        migrations.AlterModelOptions(
            name='userfields',
            options={'managed': False, 'verbose_name': 'User Field', 'verbose_name_plural': 'User Fields'},
        ),
        migrations.CreateModel(
            name='CellsGeosMiddle',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('geo', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='cell_links', to='dashboard.geoids')),
                ('s2celltoken', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='geo_links', to='dashboard.s2celltoken')),
            ],
        ),
        migrations.CreateModel(
            name='UserAuthorizationsAccess',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('is_active', models.BooleanField(default=False, help_text='Toggle access to APIs')),
                ('visibility', models.CharField(choices=[('public', 'Public'), ('private', 'Private')], default='private', max_length=10)),
                ('created_at', models.DateTimeField(auto_now=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
                ('application', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='dashboard.application')),
                ('user', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to=settings.AUTH_USER_MODEL, to_field='user_registry_id')),
            ],
            options={
                'verbose_name': 'User Authorization Access',
                'verbose_name_plural': 'User Authorization Access',
                'db_table': 'user_authorizations_access',
                'unique_together': {('user', 'application')},
            },
        ),
        migrations.CreateModel(
            name='UserApplicationAssociation',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('creation_date', models.DateTimeField(blank=True, null=True)),
                ('served_data_size', models.FloatField(blank=True, null=True)),
                ('is_active', models.BooleanField(default=True)),
                ('unique_id', models.IntegerField(blank=True, null=True)),
                ('api_called', models.JSONField(blank=True, null=True)),
                ('application', models.ForeignKey(db_column='application_id', on_delete=django.db.models.deletion.CASCADE, to='dashboard.application')),
                ('user', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to=settings.AUTH_USER_MODEL, to_field='user_registry_id')),
            ],
            options={
                'db_table': 'user_application_association',
                'unique_together': {('user', 'application')},
            },
        ),
    ]
